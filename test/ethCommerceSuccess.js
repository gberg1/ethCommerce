// Contract to be tested
var ethCommerce = artifacts.require('./ethCommerce.sol');

// Test suite

// Tests are run in sequence
// Smart contract state is not reset between tests

contract('ethCommerce', function(accounts) {
  var ethCommerceInstance;
  var seller = accounts[1];
  var buyer = accounts[2];
  var articleName1 = 'article 1';
  var articleDescription1 = 'Description for article 1';
  var articlePrice1 = 10;
	var articleName2 = 'article 2';
  var articleDescription2 = 'Description for article 2';
  var articlePrice2 = 20;
  var watcher;
  var sellerBalanceBeforeBuy, sellerBalanceAfterBuy;
  var buyerBalanceBeforeBuy, buyerBalanceAfterBuy;

	it('should be initialized with empty values', function() {
    return ethCommerce.deployed().then(function(instance) {
      return instance.getNumberOfArticles();
    }).then(function(data) {
      assert.equal(data, 0x0, 'number of articles must be zero');
    });
  });

	it('should sell a first article', function() {
    return ethCommerce.deployed().then(function(instance) {
      ethCommerceInstance = instance;
      return ethCommerceInstance.sellArticle(articleName1, articleDescription1, web3.toWei(articlePrice1, 'ether'), {
        from: seller
      });
    }).then(function(receipt) {
      assert.equal(receipt.logs.length, 1, 'should have received one event');
      assert.equal(receipt.logs[0].event, 'sellArticleEvent', 'event name should be sellArticleEvent');
      assert.equal(receipt.logs[0].args._id.toNumber(), 1, 'id must be 1');
      assert.equal(receipt.logs[0].args._seller, seller, 'seller must be ' + seller);
      assert.equal(receipt.logs[0].args._name, articleName1, 'article name must be ' + articleName1);
      assert.equal(receipt.logs[0].args._price.toNumber(), web3.toWei(articlePrice1, 'ether'), 'article price must be ' + web3.toWei(articlePrice1, 'ether'));

      return ethCommerceInstance.getNumberOfArticles();
    }).then(function(data) {
      assert.equal(data, 1, 'number of articles must be one');

      return ethCommerceInstance.getArticlesForSale();
    }).then(function(data) {
      assert.equal(data.length, 1, 'there must now be 1 article for sale');
      articleId = data[0].toNumber();
      assert.equal(articleId, 1, 'article id must be 1');

			// Getter generated by the compiler because we declared the articles mapping as public
      return ethCommerceInstance.articles(articleId);
    }).then(function(data) {
      assert.equal(data[0].toNumber(), 1, 'article id must be 1');
      assert.equal(data[1], seller, 'seller must be ' + seller);
      assert.equal(data[2], 0x0, 'buyer must be empty');
      assert.equal(data[3], articleName1, 'article name must be ' + articleName1);
      assert.equal(data[4], articleDescription1, 'article description must be ' + articleDescription1);
      assert.equal(data[5].toNumber(), web3.toWei(articlePrice1, 'ether'), 'article price must be ' + web3.toWei(articlePrice1, 'ether'));
    });
  });

	it('should sell a second article', function() {
    return ethCommerce.deployed().then(function(instance) {
      ethCommerceInstance = instance;
      return ethCommerceInstance.sellArticle(articleName2, articleDescription2, web3.toWei(articlePrice2, 'ether'), {
        from: seller
      });
    }).then(function(receipt) {
      assert.equal(receipt.logs.length, 1, 'one event should have been triggered');
      assert.equal(receipt.logs[0].event, 'sellArticleEvent', 'event should be sellArticleEvent');
      assert.equal(receipt.logs[0].args._id.toNumber(), 2, 'id must be 2');
      assert.equal(receipt.logs[0].args._seller, seller, 'event seller must be ' + seller);
      assert.equal(receipt.logs[0].args._name, articleName2, 'event article name must be ' + articleName2);
      assert.equal(receipt.logs[0].args._price.toNumber(), web3.toWei(articlePrice2, 'ether'), 'event article price must be ' + web3.toWei(articlePrice2, 'ether'));

      return ethCommerceInstance.getNumberOfArticles();
    }).then(function(data) {
      assert.equal(data, 2, 'number of articles must be two');

      return ethCommerceInstance.getArticlesForSale();
    }).then(function(data) {
      assert.equal(data.length, 2, 'there must now be 2 articles for sale');
      articleId = data[1].toNumber();
      assert.equal(articleId, 2, 'article id must be 2');

			// Getter generated by the compiler because we declared the articles mapping as public
      return ethCommerceInstance.articles(articleId);
    }).then(function(data) {
      assert.equal(data[0].toNumber(), 2, 'article id must be 2');
      assert.equal(data[1], seller, 'seller must be ' + seller);
      assert.equal(data[2], 0x0, 'buyer must be empty');
      assert.equal(data[3], articleName2, 'article name must be ' + articleName2);
      assert.equal(data[4], articleDescription2, 'article description must be ' + articleDescription2);
      assert.equal(data[5].toNumber(), web3.toWei(articlePrice2, 'ether'), 'article price must be ' + web3.toWei(articlePrice2, 'ether'));
    });
  });

	// Tests:
		// 1. Events
		// 2. Balances
		// 3, Effects of the buy article function on contract state
		// *Note requires previous presence of sellArticle call as it depends on the presence of an article to sell
		it('should buy the first article', function() {
	    return ethCommerce.deployed().then(function(instance) {
	      ethCommerceInstance = instance;
	      articleId = 1;

	      sellerBalanceBeforeBuy = web3.fromWei(web3.eth.getBalance(seller), 'ether').toNumber();
	      buyerBalanceBeforeBuy = web3.fromWei(web3.eth.getBalance(buyer), 'ether').toNumber();

	      return ethCommerceInstance.buyArticle(articleId, {
	        from: buyer,
	        value: web3.toWei(articlePrice1, 'ether')
	      });
	    }).then(function(receipt) {
	      assert.equal(receipt.logs.length, 1, 'one event should have been triggered');
	      assert.equal(receipt.logs[0].event, 'buyArticleEvent', 'event should be buyArticleEvent');
	      assert.equal(receipt.logs[0].args._id.toNumber(), articleId, 'articleId must be ' + articleId);
	      assert.equal(receipt.logs[0].args._seller, seller, 'event seller must be ' + seller);
	      assert.equal(receipt.logs[0].args._buyer, buyer, 'event buyer must be ' + buyer);
	      assert.equal(receipt.logs[0].args._name, articleName1, 'event article name must be ' + articleName1);
	      assert.equal(receipt.logs[0].args._price.toNumber(), web3.toWei(articlePrice1, 'ether'), 'event article price must be ' + web3.toWei(articlePrice1, 'ether'));

	      sellerBalanceAfterBuy = web3.fromWei(web3.eth.getBalance(seller), 'ether').toNumber();
	      buyerBalanceAfterBuy = web3.fromWei(web3.eth.getBalance(buyer), 'ether').toNumber();

				// Check balances accounting for gas
	      assert(sellerBalanceAfterBuy == sellerBalanceBeforeBuy + articlePrice1, 'seller should have earned ' + articlePrice1 + ' ETH');
	      assert(buyerBalanceAfterBuy <= buyerBalanceBeforeBuy - articlePrice1, 'buyer should have spent ' + articlePrice1 + ' ETH');

				// Getter generated by the compiler because we declared the articles mapping as public
	      return ethCommerceInstance.articles(articleId);
	    }).then(function(data) {
	      assert.equal(data[0].toNumber(), 1, 'article id must be 1');
	      assert.equal(data[1], seller, 'seller must be ' + seller);
	      assert.equal(data[2], buyer, 'buyer must be ' + buyer);
	      assert.equal(data[3], articleName1, 'article name must be ' + articleName1);
	      assert.equal(data[4], articleDescription1, 'article description must be ' + articleDescription1);
	      assert.equal(data[5].toNumber(), web3.toWei(articlePrice1, 'ether'), 'article price must be ' + web3.toWei(articlePrice1, 'ether'));

	      return ethCommerceInstance.getArticlesForSale();
	    }).then(function(data) {
	      assert(data.length, 1, 'there should now be only one article left for sale');
	    });
	  });
});
